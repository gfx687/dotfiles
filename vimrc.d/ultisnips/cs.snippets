global !p
import vim
import os

def get_filename():
	path = os.path.basename(vim.current.buffer.name)
	return path.replace('.cs', '')
endglobal

snippet cwl "Console.WriteLine" Ab
Console.WriteLine(${1});
endsnippet

snippet thr "throw new " Ab
throw new $0;
endsnippet

snippet .ts ".ToString()" Ai
.ToString()
endsnippet

snippet .ta ".ToArray()" Ai
.ToArray()
endsnippet

snippet .tl ".ToList()" Ai
.ToList()
endsnippet

snippet (= "lambda" Ai
(${1:x} => $1.$0
endsnippet

snippet .ww ".Where(x => x.)" Ai
.Where(${1:x} => $1.$0)
endsnippet

snippet .ss ".Select(x => x.)" Ai
.Select(${1:x} => $1.$0)
endsnippet

snippet .fod ".FirstOrDefault(x => x.)" Ai
.FirstOrDefault(${1:${2:x} => $2.$0})
endsnippet

snippet .caf ".ConfigureAwait(false)" Ai
.ConfigureAwait(false)
endsnippet

snippet ts "public struct" Ab
public struct ${1:`!p snip.rv=get_filename()`}
{
	${0:#classDefinition}
}
endsnippet

snippet trec "public record" Ab
public record ${1:`!p snip.rv=get_filename()`}
{
	${0:#classDefinition}
}
endsnippet

snippet tc "public class" Ab
public class ${1:`!p snip.rv=get_filename()`}
{
	${0:#classDefinition}
}
endsnippet

snippet ti "public interface" Ab
public interface ${1:`!p snip.rv=get_filename()`}
{
	${0:#interfaceDefinition}
}
endsnippet

snippet gn "Guid.NewGuid()" Aw
Guid.NewGuid()
endsnippet

snippet pre "private readonly" Ab
private readonly
endsnippet

snippet psr "public static readonly" b
public static readonly $0
endsnippet

snippet pg "get-only prop" Ab
public $1 $2 { get; private set; }
endsnippet

snippet ps "get-set prop" Ab
public $1 $2 { get; set; }
endsnippet

snippet mdc "template for mediatr request + handler" b
/// <summary>
/// ${3}
/// </summary>
public class ${1:`!p snip.rv=get_filename()`} : IRequest<${2:Result<Unit>}>
{
	/// <summary>ctor</summary>
	public $1()
	{
	}
}

/// <summary>
/// <see cref="$1" /> handler
/// </summary>
public class $1Handler
	: IRequestHandler<$1, $2>
{
	/// <summary>ctor</summary>
	public $1Handler()
	{
	}

	/// <inheritdoc />
	public async Task<$2> Handle($1 request, CancellationToken cancellationToken)
	{
		throw new System.NotImplementedException();
	}
}
endsnippet


# :comments
snippet /s "summary" Ab
/// <summary>
/// $1
/// </summary>
endsnippet

snippet /c "cctor" Ab
/// <summary>ctor</summary>
endsnippet

snippet /i "inheritdoc" Ab
/// <inheritdoc />
endsnippet

snippet /r "see cref" Aw
<see cref="${1}" />
endsnippet


# :test
snippet .sb ".Should().Be" Ai
.Should().Be
endsnippet

snippet mcf "MockingContainerFactory" Ab
var $1 = MockingContainerFactory.Create<$2>();$0
endsnippet

snippet trc "wrap block into try-catch" Ab
try
{
	${VISUAL:default}
}
catch (${1:Exception} ex)
{
	${2://handle}
}
endsnippet

snippet prm "turn selected private readonlys to Mock<>" Ab
`!p
lines = snip.v.text.splitlines()
indent = re.split('\w', lines[0])[0]

for l in lines:
    v = l.split()
	if l != lines[0]:
		snip.rv += f"\n{indent}"
    snip.rv += f"{v[0]} {v[1]} Mock<{v[2]}> {v[3][:-1]} = new Mock<{v[2]}>(MockBehavior.Strict);"
`
endsnippet

snippet tl "test logger" b
private readonly ITestOutputHelper _log;
endsnippet

snippet moqs "Mock setup" b
$1
	.Setup(x => x.$2)
	.ReturnsAsync($3);
endsnippet

snippet moqmediart "Mock setup" b
$1
	.Setup(x => x.Send(It.IsAny<$2>(), ct))
	.ReturnsAsync($3);
endsnippet

snippet telst "Teleric setup (Arrange)" Ab
$1
	.Arrange<$2>(x => x.$3)
	.TaskResult($4)
	.OccursOnce();
endsnippet

snippet telsr "Teleric setup (Arrange)" Ab
$1
	.Arrange<$2>(x => x.$3)
	.Returns($4)
	.OccursOnce();
endsnippet

snippet mv "Mock verify" b
$1.Verify(x => x.$2(It.Is<$3>(it =>
		$4
	)$5),
	$6);
endsnippet

snippet lc "Serilog error" Ab
${1:System.Console.WriteLine}("${2:test log }" + System.Text.Json.JsonSerializer.Serialize(new
{
	$3
}, new System.Text.Json.JsonSerializerOptions { WriteIndented = true }));
endsnippet

snippet arga "Arg.IsAny<$1>()" Awb
Arg.IsAny<$1>()
endsnippet

snippet ita "It.IsAny" Awb
It.IsAny<$1>()
endsnippet

snippet it "It.Is" wb
It.Is<$1>(it => $2)
endsnippet

snippet to "Times.Once" wb
Times.Once
endsnippet

snippet nt "NUnit Test" b
[Test]
public async Task $1()
{
	$2
}
endsnippet

snippet xt "xUnit test theory" b
[Theory]
[AutoData]
public async Task $1()
{
	// Arrange
	$2

	// Act

	// Assert
}
endsnippet

snippet xf "xUnit test fact" b
[Fact]
public async Task $1()
{
	// Arrange
	$2

	// Act

	// Assert
}
endsnippet

snippet udb "using dbcontext" b
using (var db = new DefaultDbContext(DbOptions))
{
	$1
	await db.SaveChangesAsync();
}
endsnippet

snippet .up "Update property" Ai
.UpdateProperty(p => p.$1, $2)
endsnippet
