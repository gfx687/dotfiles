snippet c "public class" b
public class ${1}
{
	$0
}
endsnippet

snippet i "public interface" b
public interface ${1}
{
	$0
}
endsnippet

snippet pr "private readonly" b
private readonly 
endsnippet

snippet psr "public static readonly" b
public static readonly $0
endsnippet

snippet gn "Guid.NewGuid()" wb
Guid.NewGuid()
endsnippet

snippet pg "get-only prop" b
/// <summary>
/// $2
/// </summary>
public $1 $2 { get; private set; }
endsnippet

snippet ps "get-set prop" b
/// <summary>
/// $2
/// </summary>
public $1 $2 { get; set; }
endsnippet

snippet mc "template for mediatr command + handler" b
/// <summary>
/// ${3}
/// </summary>
public class ${1} : IRequest<${2:Result<Unit>}>
{
	/// <summary>ctor</summary>
	public $1()
	{
	}
}

/// <summary>
/// <see cref="$1" /> handler
/// </summary>
public class $1Handler
	: IRequestHandler<$1, $2>
{
	/// <summary>ctor</summary>
	public $1Handler()
	{
	}

	/// <inheritdoc />
	public async Task<$2> Handle($1 request, CancellationToken cancellationToken)
	{
		throw new System.NotImplementedException();
	}
}
endsnippet

# :comments
snippet csum "summary" b
/// <summary>
/// $1
/// </summary>
endsnippet

snippet cctor "cctor" b
/// <summary>ctor</summary>
endsnippet

snippet cinh "inheritdoc" b
/// <inheritdoc />
endsnippet

snippet csee "see cref" wb
<see cref="${1}" />
endsnippet


# :test

snippet ms "Mock setup" b
$1
	.Setup(x => x.$2)
	.ReturnsAsync($3);
endsnippet

snippet msm "Mock setup" b
$1
	.Setup(x => x.Send(It.IsAny<$2>(), ct))
	.ReturnsAsync($3);
endsnippet

snippet mv "Mock verify" b
$1.Verify(x => x.$2(It.Is<$3>(it =>
		$4
	)$5),
	$6);
endsnippet

snippet le "Serilog error" b
Serilog.Log.Logger.Error("test log: " + $1);
endsnippet

snippet lje "Serilog error" b
Serilog.Log.Logger.Error("test log: " + System.Text.Json.JsonSerializer.Serialize(new
{
	$1
}));
endsnippet

snippet ita "It.IsAny" wb
It.IsAny<$1>()
endsnippet

snippet it "It.Is" wb
It.Is<$1>(it => $2)
endsnippet

snippet to "Times.Once" wb
Times.Once
endsnippet

snippet xt "xUnit test theory" b
[Theory]
[AutoData]
public async Task $1()
{
	// Arrange
	$2

	// Act

	// Assert
}
endsnippet

snippet xf "xUnit test fact" b
[Fact]
public async Task $1()
{
	// Arrange
	$2

	// Act

	// Assert
}
endsnippet

snippet udb "using dbcontext" b
using (var db = new DefaultDbContext(DbOptions))
{
	$1
	await db.SaveChangesAsync();
}
endsnippet

snippet up "Update property" wb
UpdateProperty(p => p.$1, $2)
endsnippet
